syntax = "proto3";
package io.spoud.sdm.logistics.service.v1;

option java_multiple_files = true;
option java_package = "io.spoud.sdm.logistics.service.v1";
option go_package = "logistics.service.v1";

import "global/selection/v1/pagination.proto";
import "logistics/selection/v1/filter.proto";
import "logistics/domain/v1/domain.proto";
import "logistics/mutation/v1/mutation.proto";
import "logistics/service/v1/data_port.proto";
import "logistics/selection/v1/reference.proto";
import "permission/selection/v1/filter.proto";

import "google/protobuf/wrappers.proto";

// This service is deprecated since 29.10.2020, please use DataPortService instead
service DataOfferStateService {
  rpc GetDataOfferState (io.spoud.sdm.logistics.service.v1.GetDataPortRequest) returns (io.spoud.sdm.logistics.service.v1.GetDataPortResponse) {
    option deprecated = true;
  };
  rpc DeleteDataOfferState (io.spoud.sdm.logistics.service.v1.DeleteDataPortRequest) returns (io.spoud.sdm.logistics.service.v1.DeleteDataPortResponse) {
    option deprecated = true;
  };
  rpc ListDataOfferStates (io.spoud.sdm.logistics.service.v1.ListDataPortsRequest) returns (io.spoud.sdm.logistics.service.v1.ListDataPortsResponse) {
    option deprecated = true;
  };

  // Saves a DataOfferState.
  //
  // The entity is identified through the `self` attribute. Different mechanisms for referencing are supported,
  // like the usual name or id refs. A more advanced approach is to use matching properties as a reference (basically a tech key).
  // If the self entity to update does not yet exist and is referenced through matching properties, it gets created automatically.
  //
  // Limitations:
  //   - properties cannot be removed yet
  //   - no support of specific field updates (without updating everything), aka field masks
  rpc Save (SaveDataPortRequest) returns (SaveDataPortResponse) {
    option deprecated = true;
  };
}

syntax = "proto3";
package io.spoud.sdm.logistics.hooks.v1alpha;

option java_multiple_files = true;
option java_package = "io.spoud.sdm.logistics.hooks.v1alpha";
option go_package = "logistics.hooks.v1alpha";

import "google/protobuf/timestamp.proto";
import "logistics/domain/v1/domain.proto";

// deprecated since 15.09.2020 moved to /hooks/service/v1
service StateChanger  {
  option deprecated = true;
  // subscribe to any changes
  rpc SubscribeChange (SubscribeChangeRequest) returns (stream SubscribeChangeResponse) ;
}

// ---------------------
// Subscribe Request
// Each subscribe request will result in a stateful server stream, whereas the server tries
// to forward state changes only, if:
// 1) the filter is true (in the case of initial loading or new state) OR
// 2) an entity previously matching the filter no longer matches the filter (in the case of the new state is no longer interesting)
//
// in case 2) you'll just get the new state once to be able to cleanup or adapt...
//
// The state will be bound to the stream. If there's a communication problem like connection loss,
// the server should close the connection and do a cleanup. There's no support for resuming a stream.
// Later on, there will be some mechanisms to clearly express a position to start from (as a param in the request),
// to avoid always streaming from the beginning.
// ---------------------
message SubscribeChangeRequest {
  option deprecated = true;
  StateChangeStartPosition start_position = 1;
  repeated StateChangeFilter filters = 2;
}

// ---------------------
// Subscribe Response
// The response guarantees that all entities in the response are ordered in a consistent way.
// By consistent it means:
// 1) by creation timestamp (for initial state loading), by modified timestamp/when things happening (after initial loading, stream) - whereas a "timestamp"
//    should be strictly ordered (sequence, ...) OR
// 2) by acyclic dependencies (for initial state loading), same as 1) after initial loading.
// ---------------------
message SubscribeChangeResponse {
  option deprecated = true;
  string entity_id = 1;
  google.protobuf.Timestamp timestamp = 2;

  StateChangeAction action = 3;

  EntityType entity_type = 4;

  // in a DELETED case, the entity might be null
  oneof entity {
    io.spoud.sdm.logistics.domain.v1.DataOffer data_offer = 10;
    io.spoud.sdm.logistics.domain.v1.DataPort data_port = 12;
    io.spoud.sdm.logistics.domain.v1.DataSubscription data_subscription = 13;
    io.spoud.sdm.logistics.domain.v1.DataSubscriptionState data_subscription_state = 14;
    io.spoud.sdm.logistics.domain.v1.ResourceGroup resource_group = 15;
    io.spoud.sdm.logistics.domain.v1.Transport transport = 16;
  }
}


// ---------------------
// specific entity based filters.
// attributes are ignored if not set,
// if set they're forming an predicate out of ANDed conditions

// Entity ResourceGroup
message ResourceGroupFilter {
  option deprecated = true;
  string id = 1;
  repeated PropertiesFilter properties_filters = 2;
}

// Entity Transport
message TransportFilter {
  option deprecated = true;
  string id = 1;
  repeated PropertiesFilter properties_filters = 3;
}

// Entity DataOffer
message DataOfferFilter {
  option deprecated = true;
  string id = 1;
  repeated PropertiesFilter properties_filters = 2;
}

// Entity DataOfferState
message DataPortFilter {
  option deprecated = true;
  string id = 1;
  repeated PropertiesFilter properties_filters = 3;
}

// Entity DataSubscription
message DataSubscriptionFilter {
  option deprecated = true;
  string id = 1;
  repeated PropertiesFilter properties_filters = 2;
  string data_offer_id = 3;
}

// Entity DataSubscriptionState
message DataSubscriptionStateFilter {
  option deprecated = true;
  string id = 1;
  repeated PropertiesFilter properties_filters = 2;
}

// General predicate for one meta attribute (exact match)
message PropertiesFilter {
  option deprecated = true;
  string key = 1; // e.g. sdm.transport.kafka.topic
  string value = 2; // agg_topic_2383
}

// Possible filters
message StateChangeFilter {
  option deprecated = true;
  oneof filter {
    DataOfferFilter data_offer_filter = 1;
    DataPortFilter data_port_filter = 2;
    DataSubscriptionFilter data_subscription_filter = 3;
    DataSubscriptionStateFilter data_subscription_state_filter = 4;
    ResourceGroupFilter resource_group_filter = 5;
    TransportFilter transport_filter = 6;
  }
}

message StateChangeStartPosition {
  option deprecated = true;
  oneof position {
    PositionPreset preset = 1;
    // in future: int64 offset = 2;
    // in future google.protobuf.Timestamp timestamp = 3;
  }
}

enum PositionPreset {
  option deprecated = true;
  EARLIEST = 0;
  LATEST = 1;
}

enum StateChangeAction {
  option deprecated = true;
  UPDATED = 0;
  DELETED = 1;
}

enum EntityType {
  option deprecated = true;
  UNKNOWN = 0;
  DATA_OFFER = 1;
  DATA_PORT = 2;
  DATA_SUBSCRIPTION = 3;
  DATA_SUBSCRIPTION_STATE = 4;
  TRANSPORT = 5;
  RESOURCE_GROUP = 6;
}

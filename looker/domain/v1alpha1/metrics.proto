syntax = "proto3";
package io.spoud.sdm.looker.domain.v1alpha1;

option java_multiple_files = true;
option java_package = "io.spoud.sdm.looker.domain.v1alpha1";
option go_package = "looker.v1alpha1";

import "google/protobuf/timestamp.proto";
import "permission/domain/v1/domain.proto";
import "global/selection/v1/reference.proto";


message ResourceMetric {
  google.protobuf.Timestamp report_timestamp = 1;
  string resource_id = 2;

  enum MetricType {
    UNDEFINED = 0;

    // Message COUNTER on the producing side.
    // Tag keys:
    // - partition (default: 0)
    DATA_PORT_MESSAGES = 1;

    // Bytes COUNTER on the producing side.
    // Tag keys:
    // - partition (default: 0)
    DATA_PORT_BYTES = 2;

    // Message COUNTER on the consuming side.
    // Tag keys:
    // - partition (default: 0)
    DATA_SUBSCRIPTION_STATE_MESSAGES = 3;

    // Bytes COUNTER on the consuming side.
    // Tag keys:
    // - partition (default: 0)
    DATA_SUBSCRIPTION_STATE_BYTES = 4;

    // message lag on the consuming side
    // Tag keys:
    // - partition (default: 0)
    DATA_SUBSCRIPTION_STATE_MESSAGES_LAG = 5;

    // how well the data matches the schema
    DATA_PORT_ATTRIBUTE_QUALITY_INDEX = 6;

    // how detailed the schema is defined
    DATA_PORT_ATTRIBUTE_SPECIFICATION_INDEX = 7;

    // a combination of attribute quality and specification index
    DATA_PORT_ATTRIBUTE_INTEGRITY = 8;

    // How many item is there in this dataset
    DATA_PORT_DATASET_COUNT = 9;

    // The size in bytes of the dataset
    DATA_PORT_DATASET_SIZE_BYTES = 10;

    // Number of mutations that occur on the dataset
    DATA_PORT_MUTATIONS = 11;
  }

  double value = 3;
  MetricType type = 4;

  // Additional tags as key/value pairs for indexing purposes.
  // Tag keys are predefined per metric type. Unknown tag keys will be ignored!
  map<string, string> tags = 5;
}

// operational metric
message HealthState {
  enum State {
    UNDEFINED = 0;
    UP = 1;
    DOWN = 2;
    OUT_OF_SERVICE = 3;
  }
}

message OperationalMetricType {
  enum Type {
    UNDEFINED = 0;

    // time since the agent started
    AGENT_UPTIME_MS = 1;

    // If the agent is loop based, how long was the loop
    LOOP_TIME_MS = 2;

    // If the agent is loop based, (time of the loop)/(loop interval)*100
    // This can be used to see if the agent cannot catch up and has too much to doo. If the loop takes more than the
    // interval, it means that the agent is overwhelmed.
    LOOP_PERCENT = 3;

    // Memory usage of the agent
    MEMORY_USAGE_BYTES = 4;

    // CPU usage of the agent
    CPU_USAGE_PERCENT = 5;

    // Condensed indicator of health of a foreign system where 1.0 is healthy. (Gauge)
    // The name of the foreign system should be stated in the tag "foreign_system"
    FOREIGN_SYSTEM_HEALTH = 6;

    // Number of errors. (Counter)
    ERRORS = 7;

    // loop count (Counter)
    LOOPS_COUNTER = 8;
  }
}

message OperationalMetric {
  google.protobuf.Timestamp report_timestamp = 1;

  double double_value = 3;

  OperationalMetricType.Type type = 5;
}

message AgentRef {
  string agent_username = 1;
  string transport_path = 2;
}
